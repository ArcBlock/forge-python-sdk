syntax = "proto3";
package forge_abi;

import "google/protobuf/any.proto";
import "type.proto";

// type url: fg:x:stake_asset. Stake for Tx is the same as stake for asset.
message stakeForAsset {}

// type url: fg:x:stake_chain. So far we haven't figured out how this could be
// done.
message stakeForChain {}

// type url: fg:x:stake_node
message StakeForNode {}

// type url: fg:x:stake_user
message stakeForUser {}

// Here we will reuse DeclareTx to declare a node.
// DeclareTx could only be carried out by node admin. We will have an RPC
// to ask forge to use the private key of the node and declare its identity.
// Then an account state will be created for that node and later on people can
// stake to that account. The top N staked nodes will be validators in the
// chain.
// Once a node is declared, people can use StakeTx to stake its tokens to it
// minimun staked token is 1. stake could be very flexible, that one can stake
// for a node, a user, an asset, a chain or a tx hash (normally a vote tx)
message StakeTx {
  string to = 1;
  BigSint value = 2;
  string message = 3;
  string address = 4;

  // forge won't touch this field. Only forge app shall handle it.
  // forge app can extend the stake if the given data cannot meet its
  // requirement.
  google.protobuf.Any data = 15;
}
