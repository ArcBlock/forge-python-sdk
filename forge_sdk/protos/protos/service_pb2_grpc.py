# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from . import rpc_pb2 as rpc__pb2


class ChainRpcStub(object):
  """forge RPC definition

  Notice: when you define a new RPC, please follow the naming convention. Your
  function name is snake case, and req / req are PASCAL case of the function
  name, prefixed with Request / Response. e.g. rpc get_abc(RequestGetAbc)
  returns (ResponseGetAbc). If you break this, RPC builder would complain.

  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.send_tx = channel.unary_unary(
        '/forge_abi.ChainRpc/send_tx',
        request_serializer=rpc__pb2.RequestSendTx.SerializeToString,
        response_deserializer=rpc__pb2.ResponseSendTx.FromString,
        )
    self.get_tx = channel.stream_stream(
        '/forge_abi.ChainRpc/get_tx',
        request_serializer=rpc__pb2.RequestGetTx.SerializeToString,
        response_deserializer=rpc__pb2.ResponseGetTx.FromString,
        )
    self.get_block = channel.stream_stream(
        '/forge_abi.ChainRpc/get_block',
        request_serializer=rpc__pb2.RequestGetBlock.SerializeToString,
        response_deserializer=rpc__pb2.ResponseGetBlock.FromString,
        )
    self.get_blocks = channel.unary_unary(
        '/forge_abi.ChainRpc/get_blocks',
        request_serializer=rpc__pb2.RequestGetBlocks.SerializeToString,
        response_deserializer=rpc__pb2.ResponseGetBlocks.FromString,
        )
    self.get_unconfirmed_txs = channel.unary_unary(
        '/forge_abi.ChainRpc/get_unconfirmed_txs',
        request_serializer=rpc__pb2.RequestGetUnconfirmedTxs.SerializeToString,
        response_deserializer=rpc__pb2.ResponseGetUnconfirmedTxs.FromString,
        )
    self.get_chain_info = channel.unary_unary(
        '/forge_abi.ChainRpc/get_chain_info',
        request_serializer=rpc__pb2.RequestGetChainInfo.SerializeToString,
        response_deserializer=rpc__pb2.ResponseGetChainInfo.FromString,
        )
    self.get_node_info = channel.unary_unary(
        '/forge_abi.ChainRpc/get_node_info',
        request_serializer=rpc__pb2.RequestGetNodeInfo.SerializeToString,
        response_deserializer=rpc__pb2.ResponseGetNodeInfo.FromString,
        )
    self.search = channel.unary_unary(
        '/forge_abi.ChainRpc/search',
        request_serializer=rpc__pb2.RequestSearch.SerializeToString,
        response_deserializer=rpc__pb2.ResponseSearch.FromString,
        )
    self.get_net_info = channel.unary_unary(
        '/forge_abi.ChainRpc/get_net_info',
        request_serializer=rpc__pb2.RequestGetNetInfo.SerializeToString,
        response_deserializer=rpc__pb2.ResponseGetNetInfo.FromString,
        )
    self.get_validators_info = channel.unary_unary(
        '/forge_abi.ChainRpc/get_validators_info',
        request_serializer=rpc__pb2.RequestGetValidatorsInfo.SerializeToString,
        response_deserializer=rpc__pb2.ResponseGetValidatorsInfo.FromString,
        )
    self.get_config = channel.unary_unary(
        '/forge_abi.ChainRpc/get_config',
        request_serializer=rpc__pb2.RequestGetConfig.SerializeToString,
        response_deserializer=rpc__pb2.ResponseGetConfig.FromString,
        )


class ChainRpcServicer(object):
  """forge RPC definition

  Notice: when you define a new RPC, please follow the naming convention. Your
  function name is snake case, and req / req are PASCAL case of the function
  name, prefixed with Request / Response. e.g. rpc get_abc(RequestGetAbc)
  returns (ResponseGetAbc). If you break this, RPC builder would complain.

  """

  def send_tx(self, request, context):
    """tx related
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def get_tx(self, request_iterator, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def get_block(self, request_iterator, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def get_blocks(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def get_unconfirmed_txs(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def get_chain_info(self, request, context):
    """utility
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def get_node_info(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def search(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def get_net_info(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def get_validators_info(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def get_config(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_ChainRpcServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'send_tx': grpc.unary_unary_rpc_method_handler(
          servicer.send_tx,
          request_deserializer=rpc__pb2.RequestSendTx.FromString,
          response_serializer=rpc__pb2.ResponseSendTx.SerializeToString,
      ),
      'get_tx': grpc.stream_stream_rpc_method_handler(
          servicer.get_tx,
          request_deserializer=rpc__pb2.RequestGetTx.FromString,
          response_serializer=rpc__pb2.ResponseGetTx.SerializeToString,
      ),
      'get_block': grpc.stream_stream_rpc_method_handler(
          servicer.get_block,
          request_deserializer=rpc__pb2.RequestGetBlock.FromString,
          response_serializer=rpc__pb2.ResponseGetBlock.SerializeToString,
      ),
      'get_blocks': grpc.unary_unary_rpc_method_handler(
          servicer.get_blocks,
          request_deserializer=rpc__pb2.RequestGetBlocks.FromString,
          response_serializer=rpc__pb2.ResponseGetBlocks.SerializeToString,
      ),
      'get_unconfirmed_txs': grpc.unary_unary_rpc_method_handler(
          servicer.get_unconfirmed_txs,
          request_deserializer=rpc__pb2.RequestGetUnconfirmedTxs.FromString,
          response_serializer=rpc__pb2.ResponseGetUnconfirmedTxs.SerializeToString,
      ),
      'get_chain_info': grpc.unary_unary_rpc_method_handler(
          servicer.get_chain_info,
          request_deserializer=rpc__pb2.RequestGetChainInfo.FromString,
          response_serializer=rpc__pb2.ResponseGetChainInfo.SerializeToString,
      ),
      'get_node_info': grpc.unary_unary_rpc_method_handler(
          servicer.get_node_info,
          request_deserializer=rpc__pb2.RequestGetNodeInfo.FromString,
          response_serializer=rpc__pb2.ResponseGetNodeInfo.SerializeToString,
      ),
      'search': grpc.unary_unary_rpc_method_handler(
          servicer.search,
          request_deserializer=rpc__pb2.RequestSearch.FromString,
          response_serializer=rpc__pb2.ResponseSearch.SerializeToString,
      ),
      'get_net_info': grpc.unary_unary_rpc_method_handler(
          servicer.get_net_info,
          request_deserializer=rpc__pb2.RequestGetNetInfo.FromString,
          response_serializer=rpc__pb2.ResponseGetNetInfo.SerializeToString,
      ),
      'get_validators_info': grpc.unary_unary_rpc_method_handler(
          servicer.get_validators_info,
          request_deserializer=rpc__pb2.RequestGetValidatorsInfo.FromString,
          response_serializer=rpc__pb2.ResponseGetValidatorsInfo.SerializeToString,
      ),
      'get_config': grpc.unary_unary_rpc_method_handler(
          servicer.get_config,
          request_deserializer=rpc__pb2.RequestGetConfig.FromString,
          response_serializer=rpc__pb2.ResponseGetConfig.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'forge_abi.ChainRpc', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class EventRpcStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.subscribe = channel.unary_stream(
        '/forge_abi.EventRpc/subscribe',
        request_serializer=rpc__pb2.RequestSubscribe.SerializeToString,
        response_deserializer=rpc__pb2.ResponseSubscribe.FromString,
        )
    self.unsubscribe = channel.unary_unary(
        '/forge_abi.EventRpc/unsubscribe',
        request_serializer=rpc__pb2.RequestUnsubscribe.SerializeToString,
        response_deserializer=rpc__pb2.ResponseUnsubscribe.FromString,
        )


class EventRpcServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def subscribe(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def unsubscribe(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_EventRpcServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'subscribe': grpc.unary_stream_rpc_method_handler(
          servicer.subscribe,
          request_deserializer=rpc__pb2.RequestSubscribe.FromString,
          response_serializer=rpc__pb2.ResponseSubscribe.SerializeToString,
      ),
      'unsubscribe': grpc.unary_unary_rpc_method_handler(
          servicer.unsubscribe,
          request_deserializer=rpc__pb2.RequestUnsubscribe.FromString,
          response_serializer=rpc__pb2.ResponseUnsubscribe.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'forge_abi.EventRpc', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class FileRpcStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.store_file = channel.stream_unary(
        '/forge_abi.FileRpc/store_file',
        request_serializer=rpc__pb2.RequestStoreFile.SerializeToString,
        response_deserializer=rpc__pb2.ResponseStoreFile.FromString,
        )
    self.load_file = channel.unary_stream(
        '/forge_abi.FileRpc/load_file',
        request_serializer=rpc__pb2.RequestLoadFile.SerializeToString,
        response_deserializer=rpc__pb2.ResponseLoadFile.FromString,
        )
    self.pin_file = channel.unary_unary(
        '/forge_abi.FileRpc/pin_file',
        request_serializer=rpc__pb2.RequestPinFile.SerializeToString,
        response_deserializer=rpc__pb2.ResponsePinFile.FromString,
        )


class FileRpcServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def store_file(self, request_iterator, context):
    """filesystem related
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def load_file(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def pin_file(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_FileRpcServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'store_file': grpc.stream_unary_rpc_method_handler(
          servicer.store_file,
          request_deserializer=rpc__pb2.RequestStoreFile.FromString,
          response_serializer=rpc__pb2.ResponseStoreFile.SerializeToString,
      ),
      'load_file': grpc.unary_stream_rpc_method_handler(
          servicer.load_file,
          request_deserializer=rpc__pb2.RequestLoadFile.FromString,
          response_serializer=rpc__pb2.ResponseLoadFile.SerializeToString,
      ),
      'pin_file': grpc.unary_unary_rpc_method_handler(
          servicer.pin_file,
          request_deserializer=rpc__pb2.RequestPinFile.FromString,
          response_serializer=rpc__pb2.ResponsePinFile.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'forge_abi.FileRpc', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class StateRpcStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.get_account_state = channel.stream_stream(
        '/forge_abi.StateRpc/get_account_state',
        request_serializer=rpc__pb2.RequestGetAccountState.SerializeToString,
        response_deserializer=rpc__pb2.ResponseGetAccountState.FromString,
        )
    self.get_asset_state = channel.stream_stream(
        '/forge_abi.StateRpc/get_asset_state',
        request_serializer=rpc__pb2.RequestGetAssetState.SerializeToString,
        response_deserializer=rpc__pb2.ResponseGetAssetState.FromString,
        )
    self.get_forge_state = channel.unary_unary(
        '/forge_abi.StateRpc/get_forge_state',
        request_serializer=rpc__pb2.RequestGetForgeState.SerializeToString,
        response_deserializer=rpc__pb2.ResponseGetForgeState.FromString,
        )
    self.get_protocol_state = channel.stream_stream(
        '/forge_abi.StateRpc/get_protocol_state',
        request_serializer=rpc__pb2.RequestGetProtocolState.SerializeToString,
        response_deserializer=rpc__pb2.ResponseGetProtocolState.FromString,
        )
    self.get_stake_state = channel.stream_stream(
        '/forge_abi.StateRpc/get_stake_state',
        request_serializer=rpc__pb2.RequestGetStakeState.SerializeToString,
        response_deserializer=rpc__pb2.ResponseGetStakeState.FromString,
        )
    self.get_swap_state = channel.stream_stream(
        '/forge_abi.StateRpc/get_swap_state',
        request_serializer=rpc__pb2.RequestGetSwapState.SerializeToString,
        response_deserializer=rpc__pb2.ResponseGetSwapState.FromString,
        )
    self.get_delegate_state = channel.stream_stream(
        '/forge_abi.StateRpc/get_delegate_state',
        request_serializer=rpc__pb2.RequestGetDelegateState.SerializeToString,
        response_deserializer=rpc__pb2.ResponseGetDelegateState.FromString,
        )


class StateRpcServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def get_account_state(self, request_iterator, context):
    """state related
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def get_asset_state(self, request_iterator, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def get_forge_state(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def get_protocol_state(self, request_iterator, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def get_stake_state(self, request_iterator, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def get_swap_state(self, request_iterator, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def get_delegate_state(self, request_iterator, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_StateRpcServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'get_account_state': grpc.stream_stream_rpc_method_handler(
          servicer.get_account_state,
          request_deserializer=rpc__pb2.RequestGetAccountState.FromString,
          response_serializer=rpc__pb2.ResponseGetAccountState.SerializeToString,
      ),
      'get_asset_state': grpc.stream_stream_rpc_method_handler(
          servicer.get_asset_state,
          request_deserializer=rpc__pb2.RequestGetAssetState.FromString,
          response_serializer=rpc__pb2.ResponseGetAssetState.SerializeToString,
      ),
      'get_forge_state': grpc.unary_unary_rpc_method_handler(
          servicer.get_forge_state,
          request_deserializer=rpc__pb2.RequestGetForgeState.FromString,
          response_serializer=rpc__pb2.ResponseGetForgeState.SerializeToString,
      ),
      'get_protocol_state': grpc.stream_stream_rpc_method_handler(
          servicer.get_protocol_state,
          request_deserializer=rpc__pb2.RequestGetProtocolState.FromString,
          response_serializer=rpc__pb2.ResponseGetProtocolState.SerializeToString,
      ),
      'get_stake_state': grpc.stream_stream_rpc_method_handler(
          servicer.get_stake_state,
          request_deserializer=rpc__pb2.RequestGetStakeState.FromString,
          response_serializer=rpc__pb2.ResponseGetStakeState.SerializeToString,
      ),
      'get_swap_state': grpc.stream_stream_rpc_method_handler(
          servicer.get_swap_state,
          request_deserializer=rpc__pb2.RequestGetSwapState.FromString,
          response_serializer=rpc__pb2.ResponseGetSwapState.SerializeToString,
      ),
      'get_delegate_state': grpc.stream_stream_rpc_method_handler(
          servicer.get_delegate_state,
          request_deserializer=rpc__pb2.RequestGetDelegateState.FromString,
          response_serializer=rpc__pb2.ResponseGetDelegateState.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'forge_abi.StateRpc', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class WalletRpcStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.declare_node = channel.unary_unary(
        '/forge_abi.WalletRpc/declare_node',
        request_serializer=rpc__pb2.RequestDeclareNode.SerializeToString,
        response_deserializer=rpc__pb2.ResponseDeclareNode.FromString,
        )


class WalletRpcServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def declare_node(self, request, context):
    """wallet related
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_WalletRpcServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'declare_node': grpc.unary_unary_rpc_method_handler(
          servicer.declare_node,
          request_deserializer=rpc__pb2.RequestDeclareNode.FromString,
          response_serializer=rpc__pb2.ResponseDeclareNode.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'forge_abi.WalletRpc', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class StatsRpcStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.get_forge_stats = channel.unary_unary(
        '/forge_abi.StatsRpc/get_forge_stats',
        request_serializer=rpc__pb2.RequestGetForgeStats.SerializeToString,
        response_deserializer=rpc__pb2.ResponseGetForgeStats.FromString,
        )
    self.list_transactions = channel.unary_unary(
        '/forge_abi.StatsRpc/list_transactions',
        request_serializer=rpc__pb2.RequestListTransactions.SerializeToString,
        response_deserializer=rpc__pb2.ResponseListTransactions.FromString,
        )
    self.list_assets = channel.unary_unary(
        '/forge_abi.StatsRpc/list_assets',
        request_serializer=rpc__pb2.RequestListAssets.SerializeToString,
        response_deserializer=rpc__pb2.ResponseListAssets.FromString,
        )
    self.list_stakes = channel.unary_unary(
        '/forge_abi.StatsRpc/list_stakes',
        request_serializer=rpc__pb2.RequestListStakes.SerializeToString,
        response_deserializer=rpc__pb2.ResponseListStakes.FromString,
        )
    self.list_account = channel.unary_unary(
        '/forge_abi.StatsRpc/list_account',
        request_serializer=rpc__pb2.RequestListAccount.SerializeToString,
        response_deserializer=rpc__pb2.ResponseListAccount.FromString,
        )
    self.list_top_accounts = channel.unary_unary(
        '/forge_abi.StatsRpc/list_top_accounts',
        request_serializer=rpc__pb2.RequestListTopAccounts.SerializeToString,
        response_deserializer=rpc__pb2.ResponseListTopAccounts.FromString,
        )
    self.list_asset_transactions = channel.unary_unary(
        '/forge_abi.StatsRpc/list_asset_transactions',
        request_serializer=rpc__pb2.RequestListAssetTransactions.SerializeToString,
        response_deserializer=rpc__pb2.ResponseListAssetTransactions.FromString,
        )
    self.list_blocks = channel.unary_unary(
        '/forge_abi.StatsRpc/list_blocks',
        request_serializer=rpc__pb2.RequestListBlocks.SerializeToString,
        response_deserializer=rpc__pb2.ResponseListBlocks.FromString,
        )
    self.get_health_status = channel.unary_unary(
        '/forge_abi.StatsRpc/get_health_status',
        request_serializer=rpc__pb2.RequestGetHealthStatus.SerializeToString,
        response_deserializer=rpc__pb2.ResponseGetHealthStatus.FromString,
        )
    self.list_swap = channel.unary_unary(
        '/forge_abi.StatsRpc/list_swap',
        request_serializer=rpc__pb2.RequestListSwap.SerializeToString,
        response_deserializer=rpc__pb2.ResponseListSwap.FromString,
        )


class StatsRpcServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def get_forge_stats(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def list_transactions(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def list_assets(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def list_stakes(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def list_account(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def list_top_accounts(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def list_asset_transactions(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def list_blocks(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def get_health_status(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def list_swap(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_StatsRpcServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'get_forge_stats': grpc.unary_unary_rpc_method_handler(
          servicer.get_forge_stats,
          request_deserializer=rpc__pb2.RequestGetForgeStats.FromString,
          response_serializer=rpc__pb2.ResponseGetForgeStats.SerializeToString,
      ),
      'list_transactions': grpc.unary_unary_rpc_method_handler(
          servicer.list_transactions,
          request_deserializer=rpc__pb2.RequestListTransactions.FromString,
          response_serializer=rpc__pb2.ResponseListTransactions.SerializeToString,
      ),
      'list_assets': grpc.unary_unary_rpc_method_handler(
          servicer.list_assets,
          request_deserializer=rpc__pb2.RequestListAssets.FromString,
          response_serializer=rpc__pb2.ResponseListAssets.SerializeToString,
      ),
      'list_stakes': grpc.unary_unary_rpc_method_handler(
          servicer.list_stakes,
          request_deserializer=rpc__pb2.RequestListStakes.FromString,
          response_serializer=rpc__pb2.ResponseListStakes.SerializeToString,
      ),
      'list_account': grpc.unary_unary_rpc_method_handler(
          servicer.list_account,
          request_deserializer=rpc__pb2.RequestListAccount.FromString,
          response_serializer=rpc__pb2.ResponseListAccount.SerializeToString,
      ),
      'list_top_accounts': grpc.unary_unary_rpc_method_handler(
          servicer.list_top_accounts,
          request_deserializer=rpc__pb2.RequestListTopAccounts.FromString,
          response_serializer=rpc__pb2.ResponseListTopAccounts.SerializeToString,
      ),
      'list_asset_transactions': grpc.unary_unary_rpc_method_handler(
          servicer.list_asset_transactions,
          request_deserializer=rpc__pb2.RequestListAssetTransactions.FromString,
          response_serializer=rpc__pb2.ResponseListAssetTransactions.SerializeToString,
      ),
      'list_blocks': grpc.unary_unary_rpc_method_handler(
          servicer.list_blocks,
          request_deserializer=rpc__pb2.RequestListBlocks.FromString,
          response_serializer=rpc__pb2.ResponseListBlocks.SerializeToString,
      ),
      'get_health_status': grpc.unary_unary_rpc_method_handler(
          servicer.get_health_status,
          request_deserializer=rpc__pb2.RequestGetHealthStatus.FromString,
          response_serializer=rpc__pb2.ResponseGetHealthStatus.SerializeToString,
      ),
      'list_swap': grpc.unary_unary_rpc_method_handler(
          servicer.list_swap,
          request_deserializer=rpc__pb2.RequestListSwap.FromString,
          response_serializer=rpc__pb2.ResponseListSwap.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'forge_abi.StatsRpc', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
