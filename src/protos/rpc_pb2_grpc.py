# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import rpc_pb2 as rpc__pb2


class ChainRpcStub(object):
  """forge RPC definition

  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.create_tx = channel.unary_unary(
        '/forge_abi.ChainRpc/create_tx',
        request_serializer=rpc__pb2.RequestCreateTx.SerializeToString,
        response_deserializer=rpc__pb2.ResponseCreateTx.FromString,
        )
    self.send_tx = channel.unary_unary(
        '/forge_abi.ChainRpc/send_tx',
        request_serializer=rpc__pb2.RequestSendTx.SerializeToString,
        response_deserializer=rpc__pb2.ResponseSendTx.FromString,
        )
    self.get_tx = channel.stream_stream(
        '/forge_abi.ChainRpc/get_tx',
        request_serializer=rpc__pb2.RequestGetTx.SerializeToString,
        response_deserializer=rpc__pb2.ResponseGetTx.FromString,
        )
    self.get_block = channel.stream_stream(
        '/forge_abi.ChainRpc/get_block',
        request_serializer=rpc__pb2.RequestGetBlock.SerializeToString,
        response_deserializer=rpc__pb2.ResponseGetBlock.FromString,
        )
    self.get_chain_info = channel.unary_unary(
        '/forge_abi.ChainRpc/get_chain_info',
        request_serializer=rpc__pb2.RequestGetChainInfo.SerializeToString,
        response_deserializer=rpc__pb2.ResponseGetChainInfo.FromString,
        )
    self.search = channel.unary_unary(
        '/forge_abi.ChainRpc/search',
        request_serializer=rpc__pb2.RequestSearch.SerializeToString,
        response_deserializer=rpc__pb2.ResponseSearch.FromString,
        )


class ChainRpcServicer(object):
  """forge RPC definition

  """

  def create_tx(self, request, context):
    """tx related
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def send_tx(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def get_tx(self, request_iterator, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def get_block(self, request_iterator, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def get_chain_info(self, request, context):
    """utility
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def search(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_ChainRpcServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'create_tx': grpc.unary_unary_rpc_method_handler(
          servicer.create_tx,
          request_deserializer=rpc__pb2.RequestCreateTx.FromString,
          response_serializer=rpc__pb2.ResponseCreateTx.SerializeToString,
      ),
      'send_tx': grpc.unary_unary_rpc_method_handler(
          servicer.send_tx,
          request_deserializer=rpc__pb2.RequestSendTx.FromString,
          response_serializer=rpc__pb2.ResponseSendTx.SerializeToString,
      ),
      'get_tx': grpc.stream_stream_rpc_method_handler(
          servicer.get_tx,
          request_deserializer=rpc__pb2.RequestGetTx.FromString,
          response_serializer=rpc__pb2.ResponseGetTx.SerializeToString,
      ),
      'get_block': grpc.stream_stream_rpc_method_handler(
          servicer.get_block,
          request_deserializer=rpc__pb2.RequestGetBlock.FromString,
          response_serializer=rpc__pb2.ResponseGetBlock.SerializeToString,
      ),
      'get_chain_info': grpc.unary_unary_rpc_method_handler(
          servicer.get_chain_info,
          request_deserializer=rpc__pb2.RequestGetChainInfo.FromString,
          response_serializer=rpc__pb2.ResponseGetChainInfo.SerializeToString,
      ),
      'search': grpc.unary_unary_rpc_method_handler(
          servicer.search,
          request_deserializer=rpc__pb2.RequestSearch.FromString,
          response_serializer=rpc__pb2.ResponseSearch.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'forge_abi.ChainRpc', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class WalletRpcStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.create_wallet = channel.unary_unary(
        '/forge_abi.WalletRpc/create_wallet',
        request_serializer=rpc__pb2.RequestCreateWallet.SerializeToString,
        response_deserializer=rpc__pb2.ResponseCreateWallet.FromString,
        )
    self.load_wallet = channel.unary_unary(
        '/forge_abi.WalletRpc/load_wallet',
        request_serializer=rpc__pb2.RequestLoadWallet.SerializeToString,
        response_deserializer=rpc__pb2.ResponseLoadWallet.FromString,
        )
    self.recover_wallet = channel.unary_unary(
        '/forge_abi.WalletRpc/recover_wallet',
        request_serializer=rpc__pb2.RequestRecoverWallet.SerializeToString,
        response_deserializer=rpc__pb2.ResponseRecoverWallet.FromString,
        )
    self.list_wallets = channel.unary_stream(
        '/forge_abi.WalletRpc/list_wallets',
        request_serializer=rpc__pb2.RequestListWallets.SerializeToString,
        response_deserializer=rpc__pb2.ResponseListWallet.FromString,
        )
    self.remove_wallet = channel.unary_unary(
        '/forge_abi.WalletRpc/remove_wallet',
        request_serializer=rpc__pb2.RequestRemoveWallet.SerializeToString,
        response_deserializer=rpc__pb2.ResponseRemoveWallet.FromString,
        )


class WalletRpcServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def create_wallet(self, request, context):
    """wallet related
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def load_wallet(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def recover_wallet(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def list_wallets(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def remove_wallet(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_WalletRpcServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'create_wallet': grpc.unary_unary_rpc_method_handler(
          servicer.create_wallet,
          request_deserializer=rpc__pb2.RequestCreateWallet.FromString,
          response_serializer=rpc__pb2.ResponseCreateWallet.SerializeToString,
      ),
      'load_wallet': grpc.unary_unary_rpc_method_handler(
          servicer.load_wallet,
          request_deserializer=rpc__pb2.RequestLoadWallet.FromString,
          response_serializer=rpc__pb2.ResponseLoadWallet.SerializeToString,
      ),
      'recover_wallet': grpc.unary_unary_rpc_method_handler(
          servicer.recover_wallet,
          request_deserializer=rpc__pb2.RequestRecoverWallet.FromString,
          response_serializer=rpc__pb2.ResponseRecoverWallet.SerializeToString,
      ),
      'list_wallets': grpc.unary_stream_rpc_method_handler(
          servicer.list_wallets,
          request_deserializer=rpc__pb2.RequestListWallets.FromString,
          response_serializer=rpc__pb2.ResponseListWallet.SerializeToString,
      ),
      'remove_wallet': grpc.unary_unary_rpc_method_handler(
          servicer.remove_wallet,
          request_deserializer=rpc__pb2.RequestRemoveWallet.FromString,
          response_serializer=rpc__pb2.ResponseRemoveWallet.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'forge_abi.WalletRpc', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class StateRpcStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.get_account_state = channel.stream_stream(
        '/forge_abi.StateRpc/get_account_state',
        request_serializer=rpc__pb2.RequestGetAccountState.SerializeToString,
        response_deserializer=rpc__pb2.ResponseGetAccountState.FromString,
        )
    self.get_asset_state = channel.stream_stream(
        '/forge_abi.StateRpc/get_asset_state',
        request_serializer=rpc__pb2.RequestGetAssetState.SerializeToString,
        response_deserializer=rpc__pb2.ResponseGetAssetState.FromString,
        )
    self.get_channel_state = channel.stream_stream(
        '/forge_abi.StateRpc/get_channel_state',
        request_serializer=rpc__pb2.RequestGetChannelState.SerializeToString,
        response_deserializer=rpc__pb2.ResponseGetChannelState.FromString,
        )
    self.get_forge_state = channel.unary_unary(
        '/forge_abi.StateRpc/get_forge_state',
        request_serializer=rpc__pb2.RequestGetForgeState.SerializeToString,
        response_deserializer=rpc__pb2.ResponseGetForgeState.FromString,
        )


class StateRpcServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def get_account_state(self, request_iterator, context):
    """state related
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def get_asset_state(self, request_iterator, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def get_channel_state(self, request_iterator, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def get_forge_state(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_StateRpcServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'get_account_state': grpc.stream_stream_rpc_method_handler(
          servicer.get_account_state,
          request_deserializer=rpc__pb2.RequestGetAccountState.FromString,
          response_serializer=rpc__pb2.ResponseGetAccountState.SerializeToString,
      ),
      'get_asset_state': grpc.stream_stream_rpc_method_handler(
          servicer.get_asset_state,
          request_deserializer=rpc__pb2.RequestGetAssetState.FromString,
          response_serializer=rpc__pb2.ResponseGetAssetState.SerializeToString,
      ),
      'get_channel_state': grpc.stream_stream_rpc_method_handler(
          servicer.get_channel_state,
          request_deserializer=rpc__pb2.RequestGetChannelState.FromString,
          response_serializer=rpc__pb2.ResponseGetChannelState.SerializeToString,
      ),
      'get_forge_state': grpc.unary_unary_rpc_method_handler(
          servicer.get_forge_state,
          request_deserializer=rpc__pb2.RequestGetForgeState.FromString,
          response_serializer=rpc__pb2.ResponseGetForgeState.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'forge_abi.StateRpc', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class FileRpcStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.store_file = channel.stream_unary(
        '/forge_abi.FileRpc/store_file',
        request_serializer=rpc__pb2.RequestStoreFile.SerializeToString,
        response_deserializer=rpc__pb2.ResponseStoreFile.FromString,
        )
    self.load_file = channel.unary_stream(
        '/forge_abi.FileRpc/load_file',
        request_serializer=rpc__pb2.RequestLoadFile.SerializeToString,
        response_deserializer=rpc__pb2.ResponseLoadFile.FromString,
        )


class FileRpcServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def store_file(self, request_iterator, context):
    """filesystem related
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def load_file(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_FileRpcServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'store_file': grpc.stream_unary_rpc_method_handler(
          servicer.store_file,
          request_deserializer=rpc__pb2.RequestStoreFile.FromString,
          response_serializer=rpc__pb2.ResponseStoreFile.SerializeToString,
      ),
      'load_file': grpc.unary_stream_rpc_method_handler(
          servicer.load_file,
          request_deserializer=rpc__pb2.RequestLoadFile.FromString,
          response_serializer=rpc__pb2.ResponseLoadFile.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'forge_abi.FileRpc', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
