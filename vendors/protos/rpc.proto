syntax = "proto3";
package forge_abi;

import "google/protobuf/any.proto";

import "code.proto";
import "type.proto";
import "state.proto";

// Request / Response message definition

// create_tx(itx, wallet, token)
message RequestCreateTx {
  google.protobuf.Any itx = 1;
  bytes from = 2;
  uint64 nonce = 3;
  WalletInfo wallet = 4;
  bytes token = 5;
}

message ResponseCreateTx {
  StatusCode code = 1;
  Transaction tx = 2;
}

// send_tx(tx, wallet, token, commit \\ false)
message RequestSendTx {
  Transaction tx = 1;
  WalletInfo wallet = 2;
  bytes token = 3;
  bool commit = 4;
}

message ResponseSendTx {
  StatusCode code = 1;
  string hash = 2;
}

// get_tx(hash)
message RequestGetTx { string hash = 1; }

message ResponseGetTx {
  StatusCode code = 1;
  TransactionInfo info = 2;
}

// get_block(height)
message RequestGetBlock { uint64 height = 1; }

message ResponseGetBlock {
  StatusCode code = 1;
  BlockInfo block = 2;
}

// create_wallet(moniker, passphrase): create an account locally
message RequestCreateWallet {
  string passphrase = 1;
  WalletType type = 2;
  string moniker = 3;
}

message ResponseCreateWallet {
  StatusCode code = 1;
  bytes token = 2;
  WalletInfo wallet = 3;
}

// load_wallet(address, passphrase): load account to memory with given
// passphrase
message RequestLoadWallet {
  string address = 1;
  string passphrase = 2;
}

message ResponseLoadWallet {
  StatusCode code = 1;
  bytes token = 2;
}

// recover_wallet(data, passphrase): recover to a keystore with given
// passphrase. data could be seed words or bytes of secret key.
message RequestRecoverWallet {
  bytes data = 1;
  WalletType type = 2;
  string passphrase = 3;
  string moniker = 4;
}

message ResponseRecoverWallet {
  StatusCode code = 1;
  bytes token = 2;
  WalletInfo wallet = 3;
}

// list_wallets(): list accounts stored in this node
message RequestListWallets {}

message ResponseListWallet {
  StatusCode code = 1;
  string address = 2;
}

// remove_wallet(hash): remove account by hash for this node
message RequestRemoveWallet { string address = 1; }

message ResponseRemoveWallet { StatusCode code = 1; }

// get_account_state(address, key): retrieve the current state from a list of
// wallet addresses, return the value of the key. If key is omitted, return
// entire account states
message RequestGetAccountState {
  string address = 1;
  string key = 2; // TODO: repeated ...
  string app_hash = 3;
}

message ResponseGetAccountState {
  StatusCode code = 1;
  AccountState state = 2;
}

message RequestGetAssetState {
  string address = 1;
  string key = 2;
  string app_hash = 3;
}

message ResponseGetAssetState {
  StatusCode code = 1;
  AssetState state = 2;
}
message RequestGetChannelState {
  string address = 1;
  string key = 2;
  string app_hash = 3;
}

message ResponseGetChannelState {
  StatusCode code = 1;
  ChannelState state = 2;
}

// get_forge_state(key): retrieve Forge state by key. If key is omitted, return
// entire Forge state
message RequestGetForgeState {
  string key = 1;
  string app_hash = 2;
}

message ResponseGetForgeState {
  StatusCode code = 1;
  ForgeState state = 2;
}

// store_file(chunk): store a piece of data into ipfs, return its hash address
message RequestStoreFile { bytes chunk = 1; }

message ResponseStoreFile {
  StatusCode code = 1;
  bytes hash = 2;
}

// load_file(hash): load a hash address from ipfs and return the file content
message RequestLoadFile { bytes hash = 1; }

message ResponseLoadFile {
  StatusCode code = 1;
  bytes chunk = 2;
}

// get_chain_info(): retrieve the current chain information
message RequestGetChainInfo {}

message ResponseGetChainInfo {
  StatusCode code = 1;
  ChainInfo info = 2;
}

// search(term): retrieve related transactions by a search term (prefix match)
message RequestSearch {
  string key = 1;
  string value = 2;
}

message ResponseSearch {
  StatusCode code = 1;
  repeated TransactionInfo txs = 2;
}

// forge RPC definition

service ChainRpc {
  // tx related
  rpc create_tx(RequestCreateTx) returns (ResponseCreateTx);
  rpc send_tx(RequestSendTx) returns (ResponseSendTx);
  rpc get_tx(stream RequestGetTx) returns (stream ResponseGetTx);
  rpc get_block(stream RequestGetBlock) returns (stream ResponseGetBlock);

  // utility
  rpc get_chain_info(RequestGetChainInfo) returns (ResponseGetChainInfo);
  rpc search(RequestSearch) returns (ResponseSearch);
}

service WalletRpc {
  // wallet related
  rpc create_wallet(RequestCreateWallet) returns (ResponseCreateWallet);
  rpc load_wallet(RequestLoadWallet) returns (ResponseLoadWallet);
  rpc recover_wallet(RequestRecoverWallet) returns (ResponseRecoverWallet);
  rpc list_wallets(RequestListWallets) returns (stream ResponseListWallet);
  rpc remove_wallet(RequestRemoveWallet) returns (ResponseRemoveWallet);
}

service StateRpc {
  // state related
  rpc get_account_state(stream RequestGetAccountState)
      returns (stream ResponseGetAccountState);
  rpc get_asset_state(stream RequestGetAssetState)
      returns (stream ResponseGetAssetState);
  rpc get_channel_state(stream RequestGetChannelState)
      returns (stream ResponseGetChannelState);
  rpc get_forge_state(RequestGetForgeState) returns (ResponseGetForgeState);
}

service FileRpc {
  // filesystem related
  rpc store_file(stream RequestStoreFile) returns (ResponseStoreFile);
  rpc load_file(RequestLoadFile) returns (stream ResponseLoadFile);
}
